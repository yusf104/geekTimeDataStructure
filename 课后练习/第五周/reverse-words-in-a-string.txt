leetcode:151. 翻转字符串里的单词
给定一个字符串，逐个翻转字符串中的每个单词。

说明：

无空格字符构成一个 单词 。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

解法一：Java API
复杂度分析：时间复杂度O(N)  空间复杂度O(N)
class Solution {
    // Java API
    // 先将字符串按照空格分组 再遍历字符数组按照单词翻转
    public String reverseWords(String s) {
        if (s == null || s == ""){
            return s;
        }
        s = s.trim();
        List<String> strlist = Arrays.asList(s.split("\\s+"));
        Collections.reverse(strlist);
        return String.join(" ", strlist);
    }
}
 
 解法二 双端队列
 class Solution {
    //双端队列
    public String reverseWords(String s) {
        int left = 0, right = s.length() - 1;
        // 去掉字符串开头的空白字符
        while (left <= right && s.charAt(left) == ' ') {
            ++left;
        }

        // 去掉字符串末尾的空白字符
        while (left <= right && s.charAt(right) == ' ') {
            --right;
        }

        Deque<String> d = new ArrayDeque<String>();
        StringBuilder word = new StringBuilder();
        
        while (left <= right) {
            char c = s.charAt(left);
            if ((word.length() != 0) && (c == ' ')) {
                // 将单词 push 到队列的头部
                d.offerFirst(word.toString());
                word.setLength(0);
            } else if (c != ' ') {
                word.append(c);
            }
            ++left;
        }
        d.offerFirst(word.toString());

        return String.join(" ", d);
    }
}

