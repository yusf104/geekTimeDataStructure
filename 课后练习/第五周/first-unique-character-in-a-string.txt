leetcode:387. 字符串中的第一个唯一字符
给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。

解法一：两次遍历 + 记忆化搜索
复杂度分析：时间复杂度：O(n) 空间复杂度：最大O(M) M是字符集个数

class Solution {
     // 两遍遍历 + Hash表
     //在第一次遍历时，我们使用哈希映射统计出字符串中每个字符出现的次数
     //在第二次遍历时，我们只要遍历到了一个只出现一次的字符，那么就返回它的索引
    public int firstUniqChar(String s) {
        Map<Character, Integer> store = new HashMap<Character, Integer>();
        int n = s.length();
        //第一次遍历记录所有字母的频次
        for (int i = 0; i < n; i++){
            char ch = s.charAt(i);
            store.put(ch, store.getOrDefault(ch, 0) + 1);
        }
        //第二次遍历 与store中的对应字母频次对比，为1则直接返回
        for (int i = 0; i < n; i++){
            char ch = s.charAt(i);
            if(store.get(ch) == 1){
                return i;
            }
        }
        return -1;
       
    }
}

解法二 数组计数
复杂度分析：时间复杂度：O(n) 空间复杂度：最大O(M) M是字符集个数
class Solution {
    //数组计数
    //建立一个长度为26的数组
    //遍历第一次字符串将频次存入数组
    //遍历第二次字符串取出第一个频次为1的下标返回
    public int firstUniqChar(String s) {
        int[] store = new int[26];
        int n = s.length();
        for (int i = 0; i < n; i++){
            store[s.charAt(i) - 'a']++;
        }
         for (int i = 0; i < n; i++){
             if (store[s.charAt(i) - 'a'] == 1){
                 return i;
             }
         }
         return -1;
    }
}

解法三  哈希存储索引
复杂度分析：时间复杂度：O(n) 空间复杂度：最大O(M) M是字符集个数

class Solution {
    public int firstUniqChar(String s) {
        Map<Character, Integer> position = new HashMap<Character, Integer>();
        int n = s.length();
        for (int i = 0; i < n; ++i) {
            char ch = s.charAt(i);
            if (position.containsKey(ch)) {
                position.put(ch, -1);
            } else {
                position.put(ch, i);
            }
        }
        int first = n;
        for (Map.Entry<Character, Integer> entry : position.entrySet()) {
            int pos = entry.getValue();
            if (pos != -1 && pos < first) {
                first = pos;
            }
        }
        if (first == n) {
            first = -1;
        }
        return first;
    }
}

