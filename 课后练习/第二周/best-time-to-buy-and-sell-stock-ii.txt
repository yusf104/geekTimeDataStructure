#leetcode:122
#给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

#设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

#解法一 暴力搜索
#复杂度分析：时间复杂度 O(2^n) 
class Solution {

    private int res;
    public int maxProfit(int[] prices) {
        //暴力搜索
        //每天得操作可以分为买入 或者 不买入2种操作
        //由此可以得到递归树，回溯计算每种情况的所得利润
        int length = prices.length;
        if (length < 2){
            return 0;
        }
        this.res = 0;
        dfs(prices, 0, length, 0, res);
        return this.res;
    }

    /**
     * @param prices 股价数组
     * @param index  当前是第几天，从 0 开始
     * @param status 0 表示不持有股票，1表示持有股票，
     * @param length 表示数组长度，
     * @param profit 当前收益
     */

    public void dfs(int[] prices, int index, int length, int status, int profit){
        //递归结束条件 当前天数等于数组最大长度
        //这时候说明一个递归树分支已经到底，比较当前收益和res，返回较大值
        if (index == length){
            this.res = Math.max(this.res, profit);
            return;
        }
        //还没到最后一天，二话不说直接下探
        dfs(prices, index + 1, length, status, profit);
        //回溯
        //如果当前时间是持有股票状态则尝试卖出，盈利是前后2天股票差价 + profit
        //如果当前时间没持有股票，则尝试买入，盈利是profit - 股票价值
        if (status == 0){
             // 可以尝试转向 1
            dfs(prices, index + 1, length, 1, profit - prices[index]);
        }else{
            dfs(prices, index + 1, length, 0, profit + prices[index]);
        }
    }
}

#解法二 动态规划
#复杂度分析： 时间复杂度O(n) 空间复杂度O(n)
class Solution {

    private int res;
    public int maxProfit(int[] prices) {
        //动态规划
        int length = prices.length;
        if (length < 2){
            return 0;
        }
       
        // 0：持有现金
        // 1：持有股票
        // 假设状态转移：0 → 1 → 0 → 1 → 0 → 1 → 0
        //定义一个二维数组，dp[i][j] 表示到下标为 i 的这一天，持股状态为 j 时，我们手上拥有的最大现金数。
        //第一维 i 表示下标为 i 的那一天（ 具有前缀性质，即考虑了之前天数的交易 ）；
        //第二维 j 表示下标为 i 的那一天是持有股票，还是持有现金。这里 0 表示持有现金（cash），1 表示持有股票（stock）。


        int[][] dp = new int[length][2];
        //第一天不买入，对应的盈利现金是0
        dp[0][0] = 0;
        //第一天买入，对应现金是 -prices[0]
        dp[0][1] = -prices[0];

        //每天都有2种状态，买入or不买入,现金数需要根据前一天的结余进行计算
        for (int i = 1; i < length; i++){
            //当天的卖出剩余现金 = max(前一天卖出的剩余现金, 前一天买入的剩余现金 + price)
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            //当天的买入剩余现金 = max(前一天买入的剩余现金, 前一天卖出的剩余现金 - price)
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[length - 1][0];

    }
}

#解法三 贪心算法
#复杂度分析：时间复杂度O(n) 空间复杂度O(1)

class Solution {


    public int maxProfit(int[] prices) {
        //贪心算法，贪心」 的地方在于，对于 「今天的股价 - 昨天的股价」，得到的结果有 3 种可能：① 正数，② 00，③负数。贪心算法的决策是： 只加正数
        int length = prices.length;
        if (length < 2){
            return 0;
        }
        int res = 0;
        for(int i = 1; i < length; i++){
            res = res + Math.max(prices[i] - prices[i - 1], 0);
        }
      return res;

    }
}
