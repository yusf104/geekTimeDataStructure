#leetcode:169
#给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
 
#解法一：哈希表解题思路
#1.一次遍历将所有值 与个数映射到哈希表中
#2.二弟遍历输出多数元素
#复杂度分析： 时间复杂度O(n) 空间复杂度O(n)

class Solution {
    public int majorityElement(int[] nums) {
        //哈希表解题思路
        //1.一次遍历将所有值 与个数映射到哈希表中
        //2.二弟遍历输出多数元素
        Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();
        for (int num : nums){
            if (countMap.containsKey(num)){
                countMap.put(num, countMap.get(num) + 1);
            }else{
                countMap.put(num, 1);
            }
        }

        //输出多数元素
        int keyNum = 0;
        int maxVal = 0;
        for (int key : countMap.keySet()){
            if (countMap.get(key) > maxVal){
                maxVal = countMap.get(key);
                keyNum = key;
            }
        }
        return keyNum;
    }
}

#解法二 排序输出中位数
#复杂度分析：时间复杂度O(nlogn) 空间复杂度O(logn) 主要消耗在排序方法中
class Solution {
    public int majorityElement(int[] nums) {
        //排序
        //先将数组排序，再返回数组下标为N/2位置的元素即可
        Arrays.sort(nums);
        return nums[nums.length / 2];
      
    }
}
