#leetcode:169
#给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
 
#解法一：哈希表解题思路
#1.一次遍历将所有值 与个数映射到哈希表中
#2.二弟遍历输出多数元素
#复杂度分析： 时间复杂度O(n) 空间复杂度O(n)

class Solution {
    public int majorityElement(int[] nums) {
        //哈希表解题思路
        //1.一次遍历将所有值 与个数映射到哈希表中
        //2.二弟遍历输出多数元素
        Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();
        for (int num : nums){
            if (countMap.containsKey(num)){
                countMap.put(num, countMap.get(num) + 1);
            }else{
                countMap.put(num, 1);
            }
        }

        //输出多数元素
        int keyNum = 0;
        int maxVal = 0;
        for (int key : countMap.keySet()){
            if (countMap.get(key) > maxVal){
                maxVal = countMap.get(key);
                keyNum = key;
            }
        }
        return keyNum;
    }
}

#解法二 排序输出中位数
#复杂度分析：时间复杂度O(nlogn) 空间复杂度O(logn) 主要消耗在排序方法中
class Solution {
    public int majorityElement(int[] nums) {
        //排序
        //先将数组排序，再返回数组下标为N/2位置的元素即可
        Arrays.sort(nums);
        return nums[nums.length / 2];
      
    }
}


#解法三 分治
#复杂度分析： 时间复杂度O(nlogn) 空间复杂度O(logn)（递归过程消耗的栈空间）
class Solution {
    public int majorityElement(int[] nums) {
       //分治法思路
       //1.将数组分成左右2部分，分别求出左右部分的众数a1和a2
       //2.递归分解，直到所有的子问题都是长度为 1 的数组
       //3.回溯，查看众数
       return majorityElementRec(nums, 0, nums.length - 1);
    }

    public int majorityElementRec(int[] nums, int start, int end){
        //递归结束条件：如果start = end，一个元素直接返回本身
        if (start == end){
            return nums[start];
        }
        //本层处理


        //下探
        int mid = (end - start)/2 + start;
        int left = majorityElementRec(nums, start, mid);
        int right = majorityElementRec(nums, mid + 1, end);

        //reverse 如果当前返回值的left = right 说明已经找到众数
        if (left == right){
            return left;
        }
        //到这里说明找到的左右众数不一致，则比较2个众数数量谁的较大，则返回谁的
        int leftCount = countnum(nums, left, start, end);
        int rightCount = countnum(nums, right, start, end);
        return leftCount > rightCount ? left : right;


    }
    public int countnum(int[] nums, int num, int lo, int hi){
        int count = 0;
        for (int i = lo; i <= hi; i++){
            if (nums[i] == num){
                count++;
            }
        }
        return count;
    }
}
