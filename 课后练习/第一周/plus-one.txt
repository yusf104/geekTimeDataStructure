#leetcode:66
#给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
#最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
#你可以假设除了整数 0 之外，这个整数不会以零开头。

class Solution {
    public int[] plusOne(int[] digits) {
        //思路分析
        //1.从右向左依次遍历数组元素，遍历到的元素加一，再 digits[i] = digits[i] % 10
        //2.如果digits[i] = 0,说明可能是 9 + 1 = 10 进了一位，所以需要继续遍历更高一位，继续+1
        //3.直到digits[i] != 0,说明不需要进位了，直接返回数组
        //4.遍历完整个数组还是没有退出，则说明原数组是像[9,9,9]这样的全9数据，此时直接new一个新数组 int[digits.length + 1],第一位为1，其余全0
        for (int i = digits.length - 1; i >= 0; i--){
            digits[i]++;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0){
                return digits;
            }
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}
