#leetcode:88
#给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
#初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。

#解法一：双指针从前往后遍历

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        //双指针法解题思路
        //1.类似于合并2有序链表的逻辑，每次都把2者中的较小值放入新数组中,再向后推进
        //2.直到一方遍历完成，将另外一方剩余部分全部copy到新数组上
        int [] nums1_copy = new int[m];
        System.arraycopy(nums1, 0, nums1_copy, 0, m);


        int p1 = 0;
        int p2 = 0;
        int p = 0;
        while (p1 < m && p2 < n){
            if (nums1_copy[p1] <= nums2[p2]){
                nums1[p] = nums1_copy[p1];
                p1++;
            }else{
                nums1[p] = nums2[p2];
                p2++;
            }
            p++;
        }

        //如果还有剩余，直接copy
        if (p1 < m){
            System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - (p1 + p2));
        }
        if (p2 < n){
            System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - (p1 + p2));
        }
    }
}

#解法二：双指针从后往前遍历
